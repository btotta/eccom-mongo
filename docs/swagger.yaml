definitions:
  dtos.AddressDTO:
    properties:
      city:
        type: string
      complement:
        type: string
      country:
        type: string
      id:
        type: string
      main_address:
        type: boolean
      neighborhood:
        type: string
      number:
        type: string
      state:
        type: string
      street:
        type: string
      zip_code:
        type: string
    required:
    - city
    - country
    - neighborhood
    - number
    - state
    - street
    - zip_code
    type: object
  dtos.ProductDTO:
    properties:
      active:
        type: boolean
      brands:
        items:
          type: string
        type: array
      categorys:
        items:
          type: string
        type: array
      description:
        type: string
      id:
        type: string
      images:
        items:
          type: string
        type: array
      name:
        type: string
      name_url:
        type: string
      price:
        type: number
      principal_image:
        type: string
      quantity:
        type: integer
      sku:
        type: string
    required:
    - description
    - name
    - name_url
    - principal_image
    - quantity
    - sku
    type: object
  dtos.UserDTO:
    properties:
      email:
        type: string
      id:
        type: string
      last_name:
        type: string
      name:
        type: string
    type: object
  dtos.UserLoginDTO:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dtos.UserLoginResponseDTO:
    properties:
      refresh_token:
        type: string
      token:
        type: string
    type: object
  dtos.UserRegisterDTO:
    properties:
      confirm_password:
        type: string
      document:
        type: string
      email:
        type: string
      last_name:
        type: string
      name:
        type: string
      password:
        type: string
    required:
    - confirm_password
    - document
    - email
    - last_name
    - name
    - password
    type: object
info:
  contact: {}
paths:
  /address:
    get:
      consumes:
      - application/json
      description: Get all addresses
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dtos.AddressDTO'
            type: array
      security:
      - ApiKeyAuth: []
      summary: Get all addresses
      tags:
      - address
    post:
      consumes:
      - application/json
      description: Create an address
      parameters:
      - description: Address to be created
        in: body
        name: address
        required: true
        schema:
          $ref: '#/definitions/dtos.AddressDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.AddressDTO'
      summary: Create an address
      tags:
      - address
  /address/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an address
      parameters:
      - description: Address ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Address deleted
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Delete an address
      tags:
      - address
    get:
      consumes:
      - application/json
      description: Get an address
      parameters:
      - description: Address ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.AddressDTO'
      security:
      - ApiKeyAuth: []
      summary: Get an address
      tags:
      - address
  /address/{id}/main:
    put:
      consumes:
      - application/json
      description: Mark an address as default
      parameters:
      - description: Address ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Mark an address as default
      tags:
      - address
  /health:
    get:
      consumes:
      - application/json
      description: Check if the server is healthy
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Health check
      tags:
      - health
  /product:
    post:
      consumes:
      - application/json
      description: Create a product
      parameters:
      - description: Product
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/dtos.ProductDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.ProductDTO'
      summary: Create a product
      tags:
      - product
  /product/{sku}:
    get:
      consumes:
      - application/json
      description: Get a product
      parameters:
      - description: Product SKU
        in: path
        name: sku
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.ProductDTO'
      summary: Get a product
      tags:
      - product
  /product/{terms}:
    get:
      consumes:
      - application/json
      description: Search a product
      parameters:
      - description: Search terms
        in: query
        name: terms
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dtos.ProductDTO'
            type: array
      summary: Search a product
      tags:
      - product
  /user:
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dtos.UserRegisterDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.UserDTO'
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Create user
      tags:
      - user
  /user/login:
    post:
      consumes:
      - application/json
      description: Login user
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dtos.UserLoginDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.UserLoginResponseDTO'
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Login user
      tags:
      - user
  /user/refresh-token:
    post:
      description: Refresh token
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.UserLoginResponseDTO'
        "400":
          description: Bad Request
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Refresh token
      tags:
      - user
swagger: "2.0"
